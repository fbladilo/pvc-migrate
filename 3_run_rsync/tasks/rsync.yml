###
# required
# pvc_namespace
# pvc_name
# volume_name
# bound_pod_uid
# failed_pvcs: []
# successful_pvcs: []
# node_name
# mig_source_host:

# - set_fact:
#     mig_source_data_base_location: "/var/lib/origin/openshift.local.volumes"
#     mig_source_data_location_k8s_mount: "kubernetes.io~glusterfs"

- set_fact:
    mig_source_data_base_location: "/var/lib/origin/openshift.local.volumes"
    mig_source_data_location_k8s_mount: "kubernetes.io~glusterfs"
    mig_dest_ssh_key_remote_location: "~/.ssh/dest_key"
    mig_dest_service_url: "{{ rsync_route.resources[0].spec.host }}"

# - set_fact:
    
#     mig_dest_data_location: "/mnt/{{ pvc_ns }}/{{ pvc_name }}"
#     mig_source_data_location: "{{ mig_source_data_base_location }}/pods/{{ bound_pod_uid }}/volumes/{{ mig_source_data_location_k8s_mount }}/{{ volume_name }}/"
#     mig_source_host: "{{ node_name }}"
#     mig_dest_ssh_key_remote_location: "~/.ssh/dest_key"

# Start tasks delegated to source node 

- name: "Install stunnel"
  delegate_to: "{{ item.node_name|mandatory }}"
  yum:
    name: stunnel
    state: latest
  ignore_errors: true
  become: true
  with_items: "{{ pvc_batch }}"

- name: "Write stunnel.conf"
  delegate_to: "{{ item.node_name|mandatory }}"
  copy:
    content: |
      foreground = no
      pid =
      sslVersion = TLSv1.2
      client = yes
      syslog = no
      [ssh]
      accept = 2222
      CAFile = /etc/stunnel/tls.crt
      cert = /etc/stunnel/tls.crt
      connect = {{ mig_dest_service_url }}:443
      verify = 2
      key = /etc/stunnel/tls.key
    dest: /etc/stunnel/stunnel.conf
  ignore_errors: true
  become: true
  with_items: "{{ pvc_batch }}"

- name: "Write tls.crt"
  delegate_to: "{{ item.node_name|mandatory }}"
  copy:
    content: "{{ stunnel_crt['content']|b64decode }}"
    dest: /etc/stunnel/tls.crt
  ignore_errors: true
  become: true
  with_items: "{{ pvc_batch }}"

- name: "Write tls.key"
  delegate_to: "{{ item.node_name|mandatory }}"
  copy:
    content: "{{ stunnel_key['content']|b64decode }}"
    dest: /etc/stunnel/tls.key
    mode: 0600
  ignore_errors: true
  become: true
  with_items: "{{ pvc_batch }}"

- name: "Write stunnel systemd service unit file"
  delegate_to: "{{ item.node_name|mandatory }}"
  copy:
    content: |
      [Unit]
      Description=TLS tunnel for network daemons
      After=syslog.target network.target

      [Service]
      ExecStart=/usr/bin/stunnel
      Type=forking
      PrivateTmp=true

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/stunnel.service
  ignore_errors: true
  become: true
  with_items: "{{ pvc_batch }}"

- name: "Start stunnel"
  delegate_to: "{{ item.node_name|mandatory }}"
  systemd:
    name: "stunnel"
    state: restarted
    daemon_reload: yes
  ignore_errors: true
  become: true 
  with_items: "{{ pvc_batch }}"

- name: "Ensure .ssh directory on source node"
  delegate_to: "{{ item.node_name|mandatory }}"
  file:
    path: "~/.ssh"
    state: directory
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"

- name: "Copying private key to source node"
  delegate_to: "{{ item.node_name|mandatory }}"
  copy:
    src: "{{ mig_dest_ssh_private_key|mandatory }}"
    dest: "{{ mig_dest_ssh_key_remote_location }}"
    mode: 0600
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"

- name: "Wait for dns"
  delegate_to: "{{ item.node_name|mandatory }}"
  shell: "nslookup {{ mig_dest_service_url }}"
  register: dig_output
  until: dig_output.rc == 0
  retries: 100
  delay: 3
  ignore_errors: true
  with_items: "{{ pvc_batch }}"

- name: "Synchronizing files. This may take a while... [rsync_batch_size={{ rsync_batch_size }}] "
  delegate_to: "{{ item.node_name|mandatory }}"
  vars:
      mig_source_data_location: "{{ mig_source_data_base_location }}/pods/{{ item.bound_pod_uid }}/volumes/{{ mig_source_data_location_k8s_mount }}/{{ item.volume_name }}/"
      mig_dest_data_location: "/mnt/{{ item.pvc_namespace }}/{{ item.pvc_name }}"
  async: "{{ rsync_timeout }}"
  poll: 0
  register: async_results
  shell: "rsync -aPvvH {{ mig_source_data_location }} -e 'ssh -p 2222 -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null -i {{ mig_dest_ssh_key_remote_location }}' {{ mig_dest_ssh_user }}@localhost:{{ mig_dest_data_location }}"
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"

- name: "Wait for rsync jobs to finish [rsync_timeout={{ rsync_timeout }}]"
  delegate_to: "{{ item.item.node_name|mandatory }}"
  async_status: 
    jid: "{{ item.ansible_job_id }}"
  register: status_result
  until: status_result.finished
  retries: "{{ (rsync_timeout|int / 5) | int}}"
  delay: 5
  ignore_errors: true
  become: yes
  with_items: "{{ async_results.results }}"

- name: "Removing private key from source node"
  delegate_to: "{{ item.node_name|mandatory }}"
  file:
    path: "{{ mig_dest_ssh_key_remote_location }}"
    state: absent
  ignore_errors: true
  become: yes
  with_items: "{{ pvc_batch }}"

- name: "Stop stunnel"
  delegate_to: "{{ item.node_name|mandatory }}"
  systemd:
    name: "stunnel"
    state: stopped
  ignore_errors: true
  become: true
  with_items: "{{ pvc_batch }}"

# End tasks delegated to source node 

- name: "Collect list of failed PVCs from batch"
  vars:
    failed_pvc:
      - name: "{{ item.item.item.pvc_name}}"
        namespace: "{{ item.item.item.pvc_namespace }}"
        stdout: "{{ item.stdout }}"
        stderr: "{{ item.stderr }}"
        rc: "{{ item.rc }}"
  set_fact:
    failed_pvcs: "{{ failed_pvcs +  failed_pvc }}"
  when: item.rc != 0
  with_items: "{{ status_result.results }}"

- name: "Collect list of successful PVCs from batch"
  vars:
    successful_pvc:
      - name: "{{ item.item.item.pvc_name}}"
        namespace: "{{ item.item.item.pvc_namespace }}"
        stdout: "{{ item.stdout }}"
        stderr: "{{ item.stderr }}"
        rc: "{{ item.rc }}"
  set_fact:
    successful_pvcs: "{{ successful_pvcs +  successful_pvc }}"
  when: item.rc == 0
  with_items: "{{ status_result.results }}"
